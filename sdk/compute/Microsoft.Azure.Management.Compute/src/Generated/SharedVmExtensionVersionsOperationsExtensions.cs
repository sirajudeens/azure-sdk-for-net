// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Compute
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SharedVmExtensionVersionsOperations.
    /// </summary>
    public static partial class SharedVmExtensionVersionsOperationsExtensions
    {
            /// <summary>
            /// Create or update a shared VM Extension Version.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='sharedVmExtensionName'>
            /// The name of the shared VM Extension definition in which the Extension
            /// Version is to be created.
            /// </param>
            /// <param name='sharedVmExtensionVersionName'>
            /// The name of the shared VM Extension Version to be created. Needs to follow
            /// semantic version name pattern: The allowed characters are digit and period.
            /// Digits must be within the range of a 32-bit integer. Format:
            /// &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;
            /// </param>
            /// <param name='sharedVmExtensionVersion'>
            /// Parameters supplied to the create or update shared VM Extension Version
            /// operation.
            /// </param>
            public static SharedVmExtensionVersion CreateOrUpdate(this ISharedVmExtensionVersionsOperations operations, string resourceGroupName, string sharedVmExtensionName, string sharedVmExtensionVersionName, SharedVmExtensionVersion sharedVmExtensionVersion)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, sharedVmExtensionName, sharedVmExtensionVersionName, sharedVmExtensionVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a shared VM Extension Version.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='sharedVmExtensionName'>
            /// The name of the shared VM Extension definition in which the Extension
            /// Version is to be created.
            /// </param>
            /// <param name='sharedVmExtensionVersionName'>
            /// The name of the shared VM Extension Version to be created. Needs to follow
            /// semantic version name pattern: The allowed characters are digit and period.
            /// Digits must be within the range of a 32-bit integer. Format:
            /// &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;
            /// </param>
            /// <param name='sharedVmExtensionVersion'>
            /// Parameters supplied to the create or update shared VM Extension Version
            /// operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SharedVmExtensionVersion> CreateOrUpdateAsync(this ISharedVmExtensionVersionsOperations operations, string resourceGroupName, string sharedVmExtensionName, string sharedVmExtensionVersionName, SharedVmExtensionVersion sharedVmExtensionVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, sharedVmExtensionName, sharedVmExtensionVersionName, sharedVmExtensionVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves information about a shared VM Extension Version.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='sharedVmExtensionName'>
            /// The name of the shared VM Extension definition in which the Extension
            /// Version resides.
            /// </param>
            /// <param name='sharedVmExtensionVersionName'>
            /// The name of the shared VM Extension Version to be retrieved.
            /// </param>
            /// <param name='expand'>
            /// The expand expression to apply on the operation. Possible values include:
            /// 'ReplicationStatus'
            /// </param>
            public static SharedVmExtensionVersion Get(this ISharedVmExtensionVersionsOperations operations, string resourceGroupName, string sharedVmExtensionName, string sharedVmExtensionVersionName, string expand = default(string))
            {
                return operations.GetAsync(resourceGroupName, sharedVmExtensionName, sharedVmExtensionVersionName, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves information about a shared VM Extension Version.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='sharedVmExtensionName'>
            /// The name of the shared VM Extension definition in which the Extension
            /// Version resides.
            /// </param>
            /// <param name='sharedVmExtensionVersionName'>
            /// The name of the shared VM Extension Version to be retrieved.
            /// </param>
            /// <param name='expand'>
            /// The expand expression to apply on the operation. Possible values include:
            /// 'ReplicationStatus'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SharedVmExtensionVersion> GetAsync(this ISharedVmExtensionVersionsOperations operations, string resourceGroupName, string sharedVmExtensionName, string sharedVmExtensionVersionName, string expand = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, sharedVmExtensionName, sharedVmExtensionVersionName, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a shared VM Extension Version.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='sharedVmExtensionName'>
            /// The name of the Shared VM Extesnsion in which the extension version
            /// resides.
            /// </param>
            /// <param name='sharedVmExtensionVersionName'>
            /// The name of the shared VM Extension Version to be deleted.
            /// </param>
            public static void Delete(this ISharedVmExtensionVersionsOperations operations, string resourceGroupName, string sharedVmExtensionName, string sharedVmExtensionVersionName)
            {
                operations.DeleteAsync(resourceGroupName, sharedVmExtensionName, sharedVmExtensionVersionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a shared VM Extension Version.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='sharedVmExtensionName'>
            /// The name of the Shared VM Extesnsion in which the extension version
            /// resides.
            /// </param>
            /// <param name='sharedVmExtensionVersionName'>
            /// The name of the shared VM Extension Version to be deleted.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ISharedVmExtensionVersionsOperations operations, string resourceGroupName, string sharedVmExtensionName, string sharedVmExtensionVersionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, sharedVmExtensionName, sharedVmExtensionVersionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create or update a shared VM Extension Version.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='sharedVmExtensionName'>
            /// The name of the shared VM Extension definition in which the Extension
            /// Version is to be created.
            /// </param>
            /// <param name='sharedVmExtensionVersionName'>
            /// The name of the shared VM Extension Version to be created. Needs to follow
            /// semantic version name pattern: The allowed characters are digit and period.
            /// Digits must be within the range of a 32-bit integer. Format:
            /// &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;
            /// </param>
            /// <param name='sharedVmExtensionVersion'>
            /// Parameters supplied to the create or update shared VM Extension Version
            /// operation.
            /// </param>
            public static SharedVmExtensionVersion BeginCreateOrUpdate(this ISharedVmExtensionVersionsOperations operations, string resourceGroupName, string sharedVmExtensionName, string sharedVmExtensionVersionName, SharedVmExtensionVersion sharedVmExtensionVersion)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, sharedVmExtensionName, sharedVmExtensionVersionName, sharedVmExtensionVersion).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a shared VM Extension Version.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='sharedVmExtensionName'>
            /// The name of the shared VM Extension definition in which the Extension
            /// Version is to be created.
            /// </param>
            /// <param name='sharedVmExtensionVersionName'>
            /// The name of the shared VM Extension Version to be created. Needs to follow
            /// semantic version name pattern: The allowed characters are digit and period.
            /// Digits must be within the range of a 32-bit integer. Format:
            /// &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;
            /// </param>
            /// <param name='sharedVmExtensionVersion'>
            /// Parameters supplied to the create or update shared VM Extension Version
            /// operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SharedVmExtensionVersion> BeginCreateOrUpdateAsync(this ISharedVmExtensionVersionsOperations operations, string resourceGroupName, string sharedVmExtensionName, string sharedVmExtensionVersionName, SharedVmExtensionVersion sharedVmExtensionVersion, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, sharedVmExtensionName, sharedVmExtensionVersionName, sharedVmExtensionVersion, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a shared VM Extension Version.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='sharedVmExtensionName'>
            /// The name of the Shared VM Extesnsion in which the extension version
            /// resides.
            /// </param>
            /// <param name='sharedVmExtensionVersionName'>
            /// The name of the shared VM Extension Version to be deleted.
            /// </param>
            public static void BeginDelete(this ISharedVmExtensionVersionsOperations operations, string resourceGroupName, string sharedVmExtensionName, string sharedVmExtensionVersionName)
            {
                operations.BeginDeleteAsync(resourceGroupName, sharedVmExtensionName, sharedVmExtensionVersionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a shared VM Extension Version.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='sharedVmExtensionName'>
            /// The name of the Shared VM Extesnsion in which the extension version
            /// resides.
            /// </param>
            /// <param name='sharedVmExtensionVersionName'>
            /// The name of the shared VM Extension Version to be deleted.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this ISharedVmExtensionVersionsOperations operations, string resourceGroupName, string sharedVmExtensionName, string sharedVmExtensionVersionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, sharedVmExtensionName, sharedVmExtensionVersionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
