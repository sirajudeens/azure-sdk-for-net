// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Compute.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Specifies information about the Shared VM Extension Version that you
    /// want to create or update.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class SharedVmExtensionVersion : Resource
    {
        /// <summary>
        /// Initializes a new instance of the SharedVmExtensionVersion class.
        /// </summary>
        public SharedVmExtensionVersion()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SharedVmExtensionVersion class.
        /// </summary>
        /// <param name="location">Resource location</param>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="tags">Resource tags</param>
        /// <param name="mediaLink">The link for the extension source
        /// package.</param>
        /// <param name="regions">A list of regions to publish the extension
        /// version.</param>
        /// <param name="computeRole">This property allows you to specify the
        /// classification of the extension. Possible values include: 'PaaS',
        /// 'IaaS', 'All'</param>
        /// <param name="supportedOS">This property allows you to specify the
        /// supported OS for this extension. Possible values include:
        /// 'Windows', 'Linux'</param>
        /// <param name="supportsMultipleExtensions">Flag indicating if it
        /// supports multiple extensions.</param>
        /// <param name="isInternalExtension">Flag indicating if it is internal
        /// extension.</param>
        /// <param name="disallowMajorVersionUpgrade">Flag indicating if major
        /// version upgrade is disallowed.</param>
        /// <param name="rollbackSupported">Flag indicating if the extension
        /// version supports rollback or not</param>
        /// <param name="localResources">A list of extension image local
        /// resources.</param>
        /// <param name="blockRoleUponFailure">Flag indicating if extension
        /// role should be blocked upon failure</param>
        /// <param name="safeDeploymentPolicy">The safe deployment policy for
        /// artifact publishing that corresponds to appropriate wait time
        /// between each stage of regions. Possible values include: 'Standard',
        /// 'Hotfix', 'Minimal'</param>
        /// <param name="provisioningState">The current state of the shared VM
        /// extension.</param>
        public SharedVmExtensionVersion(string location, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string mediaLink = default(string), IList<string> regions = default(IList<string>), ComputeRoleTypes? computeRole = default(ComputeRoleTypes?), OperatingSystemTypes? supportedOS = default(OperatingSystemTypes?), bool? supportsMultipleExtensions = default(bool?), bool? isInternalExtension = default(bool?), bool? disallowMajorVersionUpgrade = default(bool?), bool? rollbackSupported = default(bool?), ExtensionConfiguration configuration = default(ExtensionConfiguration), ExtensionCertificate certificate = default(ExtensionCertificate), ExtensionEndpoints endpoints = default(ExtensionEndpoints), IList<ExtensionImageLocalResource> localResources = default(IList<ExtensionImageLocalResource>), bool? blockRoleUponFailure = default(bool?), SafeDeploymentPolicy? safeDeploymentPolicy = default(SafeDeploymentPolicy?), ReplicationStatus replicationStatus = default(ReplicationStatus), string provisioningState = default(string))
            : base(location, id, name, type, tags)
        {
            MediaLink = mediaLink;
            Regions = regions;
            ComputeRole = computeRole;
            SupportedOS = supportedOS;
            SupportsMultipleExtensions = supportsMultipleExtensions;
            IsInternalExtension = isInternalExtension;
            DisallowMajorVersionUpgrade = disallowMajorVersionUpgrade;
            RollbackSupported = rollbackSupported;
            Configuration = configuration;
            Certificate = certificate;
            Endpoints = endpoints;
            LocalResources = localResources;
            BlockRoleUponFailure = blockRoleUponFailure;
            SafeDeploymentPolicy = safeDeploymentPolicy;
            ReplicationStatus = replicationStatus;
            ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the link for the extension source package.
        /// </summary>
        [JsonProperty(PropertyName = "properties.mediaLink")]
        public string MediaLink { get; set; }

        /// <summary>
        /// Gets or sets a list of regions to publish the extension version.
        /// </summary>
        [JsonProperty(PropertyName = "properties.regions")]
        public IList<string> Regions { get; set; }

        /// <summary>
        /// Gets or sets this property allows you to specify the classification
        /// of the extension. Possible values include: 'PaaS', 'IaaS', 'All'
        /// </summary>
        [JsonProperty(PropertyName = "properties.computeRole")]
        public ComputeRoleTypes? ComputeRole { get; set; }

        /// <summary>
        /// Gets or sets this property allows you to specify the supported OS
        /// for this extension. Possible values include: 'Windows', 'Linux'
        /// </summary>
        [JsonProperty(PropertyName = "properties.supportedOS")]
        public OperatingSystemTypes? SupportedOS { get; set; }

        /// <summary>
        /// Gets or sets flag indicating if it supports multiple extensions.
        /// </summary>
        [JsonProperty(PropertyName = "properties.supportsMultipleExtensions")]
        public bool? SupportsMultipleExtensions { get; set; }

        /// <summary>
        /// Gets or sets flag indicating if it is internal extension.
        /// </summary>
        [JsonProperty(PropertyName = "properties.isInternalExtension")]
        public bool? IsInternalExtension { get; set; }

        /// <summary>
        /// Gets or sets flag indicating if major version upgrade is
        /// disallowed.
        /// </summary>
        [JsonProperty(PropertyName = "properties.disallowMajorVersionUpgrade")]
        public bool? DisallowMajorVersionUpgrade { get; set; }

        /// <summary>
        /// Gets or sets flag indicating if the extension version supports
        /// rollback or not
        /// </summary>
        [JsonProperty(PropertyName = "properties.rollbackSupported")]
        public bool? RollbackSupported { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.configuration")]
        public ExtensionConfiguration Configuration { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.certificate")]
        public ExtensionCertificate Certificate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.endpoints")]
        public ExtensionEndpoints Endpoints { get; set; }

        /// <summary>
        /// Gets or sets a list of extension image local resources.
        /// </summary>
        [JsonProperty(PropertyName = "properties.localResources")]
        public IList<ExtensionImageLocalResource> LocalResources { get; set; }

        /// <summary>
        /// Gets or sets flag indicating if extension role should be blocked
        /// upon failure
        /// </summary>
        [JsonProperty(PropertyName = "properties.blockRoleUponFailure")]
        public bool? BlockRoleUponFailure { get; set; }

        /// <summary>
        /// Gets or sets the safe deployment policy for artifact publishing
        /// that corresponds to appropriate wait time between each stage of
        /// regions. Possible values include: 'Standard', 'Hotfix', 'Minimal'
        /// </summary>
        [JsonProperty(PropertyName = "properties.safeDeploymentPolicy")]
        public SafeDeploymentPolicy? SafeDeploymentPolicy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.replicationStatus")]
        public ReplicationStatus ReplicationStatus { get; private set; }

        /// <summary>
        /// Gets the current state of the shared VM extension.
        /// </summary>
        /// <remarks>
        /// The provisioning state, which only appears in the response.
        /// Possible values include: 'Creating', 'Updating', 'Failed',
        /// 'Succeeded', 'Deleting', 'Migrating'
        /// </remarks>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
