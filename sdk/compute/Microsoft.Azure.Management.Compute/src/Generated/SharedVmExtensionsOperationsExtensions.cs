// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Compute
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SharedVmExtensionsOperations.
    /// </summary>
    public static partial class SharedVmExtensionsOperationsExtensions
    {
            /// <summary>
            /// Create or update a Shared VM Extension.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='sharedVmExtensionName'>
            /// The name of the Shared VM Extension. The allowed characters are alphabets
            /// and numbers with dots and periods allowed in the middle. The maximum length
            /// is 80 characters.
            /// </param>
            /// <param name='sharedVmExtension'>
            /// Parameters supplied to the create or update Shared VM Extension operation.
            /// </param>
            public static SharedVmExtension CreateOrUpdate(this ISharedVmExtensionsOperations operations, string resourceGroupName, string sharedVmExtensionName, SharedVmExtension sharedVmExtension)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, sharedVmExtensionName, sharedVmExtension).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a Shared VM Extension.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='sharedVmExtensionName'>
            /// The name of the Shared VM Extension. The allowed characters are alphabets
            /// and numbers with dots and periods allowed in the middle. The maximum length
            /// is 80 characters.
            /// </param>
            /// <param name='sharedVmExtension'>
            /// Parameters supplied to the create or update Shared VM Extension operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SharedVmExtension> CreateOrUpdateAsync(this ISharedVmExtensionsOperations operations, string resourceGroupName, string sharedVmExtensionName, SharedVmExtension sharedVmExtension, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, sharedVmExtensionName, sharedVmExtension, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves information about a Shared VM Extension.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='sharedVmExtensionName'>
            /// The name of the Shared VM Extension.
            /// </param>
            public static SharedVmExtension Get(this ISharedVmExtensionsOperations operations, string resourceGroupName, string sharedVmExtensionName)
            {
                return operations.GetAsync(resourceGroupName, sharedVmExtensionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves information about a Shared VM Extension.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='sharedVmExtensionName'>
            /// The name of the Shared VM Extension.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SharedVmExtension> GetAsync(this ISharedVmExtensionsOperations operations, string resourceGroupName, string sharedVmExtensionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, sharedVmExtensionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a Shared VM Extensions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='sharedVmExtensionName'>
            /// The name of the Shared VM Extension to be deleted.
            /// </param>
            public static void Delete(this ISharedVmExtensionsOperations operations, string resourceGroupName, string sharedVmExtensionName)
            {
                operations.DeleteAsync(resourceGroupName, sharedVmExtensionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a Shared VM Extensions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='sharedVmExtensionName'>
            /// The name of the Shared VM Extension to be deleted.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ISharedVmExtensionsOperations operations, string resourceGroupName, string sharedVmExtensionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, sharedVmExtensionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create or update a Shared VM Extension.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='sharedVmExtensionName'>
            /// The name of the Shared VM Extension. The allowed characters are alphabets
            /// and numbers with dots and periods allowed in the middle. The maximum length
            /// is 80 characters.
            /// </param>
            /// <param name='sharedVmExtension'>
            /// Parameters supplied to the create or update Shared VM Extension operation.
            /// </param>
            public static SharedVmExtension BeginCreateOrUpdate(this ISharedVmExtensionsOperations operations, string resourceGroupName, string sharedVmExtensionName, SharedVmExtension sharedVmExtension)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, sharedVmExtensionName, sharedVmExtension).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a Shared VM Extension.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='sharedVmExtensionName'>
            /// The name of the Shared VM Extension. The allowed characters are alphabets
            /// and numbers with dots and periods allowed in the middle. The maximum length
            /// is 80 characters.
            /// </param>
            /// <param name='sharedVmExtension'>
            /// Parameters supplied to the create or update Shared VM Extension operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SharedVmExtension> BeginCreateOrUpdateAsync(this ISharedVmExtensionsOperations operations, string resourceGroupName, string sharedVmExtensionName, SharedVmExtension sharedVmExtension, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, sharedVmExtensionName, sharedVmExtension, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a Shared VM Extensions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='sharedVmExtensionName'>
            /// The name of the Shared VM Extension to be deleted.
            /// </param>
            public static void BeginDelete(this ISharedVmExtensionsOperations operations, string resourceGroupName, string sharedVmExtensionName)
            {
                operations.BeginDeleteAsync(resourceGroupName, sharedVmExtensionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a Shared VM Extensions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='sharedVmExtensionName'>
            /// The name of the Shared VM Extension to be deleted.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this ISharedVmExtensionsOperations operations, string resourceGroupName, string sharedVmExtensionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, sharedVmExtensionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
